#!@@PERL@@ -T
# -*- cperl -*-

=begin comment

Copyright (C) 2014 Steve Schnepp

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; version 2 dated June,
1991.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=end comment

=cut

use strict;
use warnings;


use Time::HiRes;
use CGI::Fast;
#use CGI::Carp qw(fatalsToBrowser);

use POSIX;

use Munin::Master::Utils;

use Munin::Common::Logger;

use File::Basename;
use Data::Dumper;

my @times = qw(day week month year);

Munin::Common::Logger::configure( level => 'debug', output => 'screen');

my %PALETTE;    # Hash of available palettes
my @COLOUR;     # Array of actuall colours to use

{
    no warnings;
    $PALETTE{'old'} = [    # This is the old munin palette.  It lacks contrast.
        qw(22ff22 0022ff ff0000 00aaaa ff00ff
            ffa500 cc0000 0000cc 0080C0 8080C0 FF0080
            800080 688e23 408080 808000 000000 00FF00
            0080FF FF8000 800000 FB31FB
            )];

    $PALETTE{'default'} = [   # New default palette.Better contrast,more colours
            #Greens Blues   Oranges Dk yel  Dk blu  Purple  lime    Reds    Gray
        qw(00CC00 0066B3 FF8000 FFCC00 330099 990099 CCFF00 FF0000 808080
            008F00 00487D B35A00 B38F00         6B006B 8FB300 B30000 BEBEBE
            80FF80 80C9FF FFC080 FFE680 AA80FF EE00CC FF8080
            666600 FFBFFF 00FFCC CC6699 999900
            )];      # Line variations: Pure, earthy, dark pastel, misc colours
}

@COLOUR = @{ $PALETTE{'default'} };

my $range_colour  = "22ff22";
my $single_colour = "00aa00";

# Use 400 x RRA step, in order to have 1px per RRA sample.
my %times = (
    "day"   => "-2000m",  # (i.e. -33h20m)
    "week"  => "-12000m", # (i.e. -8d13h20m)
    "month" => "-48000m", # (i.e. -33d8h)
    "year"  => "-400d",
    "pinpoint"  => "dummy",
);

my %resolutions = (
    "day"   => "300",
    "week"  => "1500",
    "month" => "7200",
    "year"  => "86400"
);

my $watermark = "Munin " . $Munin::Common::Defaults::MUNIN_VERSION;

while (new CGI::Fast) {
	my $t0 = Time::HiRes::time;
	my $path = path_info();

	if ($path !~ m/^\/(.*)-(day|week|month|year|pinpoint=(\d+),(\d+))\.(svg|json|csv|xml|png)$/) {
		# We don't understand this URL
		print header(
			-status => 404,
			"X-Reason" => "invalid URL: $path",
		);
		next;
	}

	my ($graph_path, $time, $start, $end, $format) = ($1, $2, $3, $4, $5);
	$start = $times{$time} unless defined $start;
	$end = "" unless defined $end;

	# Handle the "pinpoint" time
	$time = "pinpoint" if $time =~ m/^pinpoint/;

	# Ok, now SQL is needed to go further
        use DBI;
	my $datafilename = "$Munin::Common::Defaults::MUNIN_DBDIR/datafile.sqlite";
	# Note that we reconnect for _each_ request. This is to avoid old data when the DB "rotates"
        my $dbh = DBI->connect("dbi:SQLite:dbname=$datafilename","","") or die $DBI::errstr;

	DEBUG "($graph_path, $time, $start, $end, $format)\n";

	# Find the service to display
	my $sth_url = $dbh->prepare_cached("SELECT id, type FROM url WHERE path = ?");
	$sth_url->execute($graph_path);
	my ($id, $type) = $sth_url->fetchrow_array;

	if (! defined $id) {
		# Not found
		print header(
			-status => 404,
			"X-Reason" => "'$graph_path' Not Found in DB",
		);
		next;
	} elsif ($type ne "service") {
		# Not supported yet
		print header(
			-status => 404,
			"X-Reason" => "'$type' graphing is not supported yet",
		);
		next;
	}

	DEBUG "found node=$id, type=$type";

	# Here's the most common case : only plain plugins
	my $sth;

	$sth = $dbh->prepare_cached("SELECT value FROM service_attr WHERE id = ? and name = ?");
	$sth->execute($id, "graph_title");
	my ($graph_title) = $sth->fetchrow_array();

	$sth->execute($id, "graph_order");
	my ($graph_order) = $sth->fetchrow_array();
	DEBUG "graph_order: $graph_order";

	$sth = $dbh->prepare_cached("
		SELECT
			ds.name,
			l.value,
			rf.value,
			rd.value,
			rc.value,
			gc.value,
			gd.value,
			1 as dummy
		FROM ds
		LEFT OUTER JOIN ds_attr l ON l.id = ds.id AND l.name = 'label'
		LEFT OUTER JOIN ds_attr rf ON rf.id = ds.id AND rf.name = 'rrd:file'
		LEFT OUTER JOIN ds_attr rd ON rd.id = ds.id AND rd.name = 'rrd:field'
		LEFT OUTER JOIN ds_attr rc ON rc.id = ds.id AND rc.name = 'rrd:cdef'
		LEFT OUTER JOIN ds_attr gc ON gc.id = ds.id AND gc.name = 'gfx:color'
		LEFT OUTER JOIN ds_attr gd ON gd.id = ds.id AND gd.name = 'gfx:draw'
		WHERE ds.service_id = ?
	");
	$sth->execute($id);

	# Construction of the RRD command line
	# We don't care anymore for rrdtool less than 1.4
	my @rrd_def;
	my @rrd_gfx;
	my $field_number = 0;
	while (my ($_name, $_label, $_rrdfile, $_rrdfield, $_rrdcdef, $_color, $_drawtype) = $sth->fetchrow_array()) {
		my $rrdname = $_name;

		DEBUG "rrdname: $rrdname";

		# Fetch the data
	        push @rrd_def, "DEF:avg_$rrdname=" . $_rrdfile . ":" . $_rrdfield . ":AVERAGE";
	        push @rrd_def, "DEF:min_$rrdname=" . $_rrdfile . ":" . $_rrdfield . ":MIN";
	        push @rrd_def, "DEF:max_$rrdname=" . $_rrdfile . ":" . $_rrdfield . ":MAX";

		# Graph
		$_color = $COLOUR[$field_number++ % $#COLOUR] unless defined $_color;
		$_drawtype = "LINE" unless defined $_drawtype;
	        push @rrd_gfx, "$_drawtype:avg_$rrdname#$_color:$_label";
	}

	DEBUG "rrd_def: @rrd_def";
	DEBUG "rrd_gfx: @rrd_gfx";

	# Send the HTTP Headers
	print header(
		-status => 200,
		"Content-type" => "image/png",
	) unless CGI::url_param("no_header");

	# Compute the title
	my $title = "";
	if ($time eq "pinpoint") {
		my $start_text = localtime($start);
		my $end_text = localtime($end);
		$title = "from $start_text to $end_text";
	} else {
		$title = "by " . $time;
	}

	my @rrd_header = (
		"--title", "$graph_title - $title",
		"--watermark", "Munin " . $Munin::Common::Defaults::MUNIN_VERSION,
		"--imgformat", uc($format),
		"--start", $start,
	);
	push @rrd_header, "--end" , $end if $end;

	# Send the PNG output
	my $tpng = Time::HiRes::time;
	system("rrdtool", "graph", "-",
		@rrd_header,
		@rrd_def,
		@rrd_gfx
	);

	my $ttot = Time::HiRes::time;
	DEBUG sprintf("total:%.3fs (db:%.3fs rrd:%.3fs)",
		($ttot - $t0),
		($tpng - $t0),
		($ttot - $tpng),
	);
}

sub remove_dups {
	my ($str) = @_;

	my @a = split(/ +/, $str);
	my %seen;
	@a = grep { ! ($seen{$_}++) } @a;

	return join(" ", @a);
}

# CGI in perl 5.20 is now seriously broken as it doesn't import into the namespace.
# So we have to delegate explicitely. It's easier than prefixing with CGI:: each use.
sub header { return CGI::header(@_); }
sub path_info { return CGI::path_info(@_); }
sub url { return CGI::url(@_); }
sub script_name { return CGI::script_name(@_); }
sub url_param { return CGI::url_param(@_); }
