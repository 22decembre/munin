#!@@PERL@@
# -*- cperl -*-

=begin comment

Copyright (C) 2013 Steve Schnepp

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; version 2 dated June,
1991.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=end comment

=cut

use strict;
use warnings;


use CGI::Fast qw(:cgi);
use CGI::Carp qw(fatalsToBrowser);

use POSIX;
use HTML::Template;

use Munin::Master::Utils;

use Munin::Master::Logger;
use Log::Log4perl qw( :easy );

use Data::Dumper;

my @times = qw(DAY WEEK MONTH YEAR);

while (new CGI::Fast) {
        use DBI;
	my $datafilename = "$Munin::Common::Defaults::MUNIN_DBDIR/datafile.sqlite";
        my $dbh = DBI->connect("dbi:SQLite:dbname=$datafilename","","") or die $DBI::errstr;

	my $template_filename;
	my %template_params = (
		MUNIN_VERSION	=> $Munin::Common::Defaults::MUNIN_VERSION,
		TIMESTAMP       => strftime("%Y-%m-%d %T%z (%Z)", localtime),
		R_PATH		=> "",
	);

	# Remove the leading "/"
	my $path = $ENV{PATH_INFO};
	$path =~ s,^/,,;

	# Handle special pages
	if ($path eq "") {
		# Emit overview template
		$template_filename = 'munin-overview.tmpl';

		# Header params
		###################
		{
			$template_params{PATH} = [
				{ } , # XXX - Template says first args has to be empty
				{ "pathname" => "First", },
				{ "pathname" => "Second", },
			];
		}

		# Navigation params
		###################

		# Problems nav
		{
			my $sth = $dbh->prepare('SELECT SUM(critical), SUM(warning), SUM(unknown) FROM ds');
			$sth->execute();
			my ($critical, $warning, $unknown) = $sth->fetchrow_array;
			$template_params{NCRITICAL} = $critical;
			$template_params{NWARNING} = $warning;
			$template_params{NUNKNOWN} = $unknown;
		}

		# Groups nav
		{
			my $sth = $dbh->prepare("SELECT g.name, u.path FROM grp g INNER JOIN url u ON u.id = g.id AND u.type = 'group'");
                        $sth->execute();

			my $rootgroups = [];
			while (my ($_name, $_path) = $sth->fetchrow_array) {
				push @$rootgroups, { NAME => $_name, URL => $_path };
			}
			$template_params{ROOTGROUPS} = $rootgroups;
		}

		# Categories nav
		# TODO

		goto RENDERING;

	} elsif ($path eq "problems.html") {
		# Emit problem template
		goto RENDERING;
	}

	# Handle normal pages
	my $sth_url = $dbh->prepare('SELECT id, type FROM url WHERE path = ?');
	$sth_url->execute($path);
	my ($id, $type) = $sth_url->fetchrow_array;

	if (! defined $id) {
		# Not found
		print header( -status => 404, );
	} elsif ($type eq "group") {
		# Emit group template
	} elsif ($type eq "node") {
		# Emit node template
	} elsif ($type eq "service") {
		# Emit service template
		$template_filename = 'munin-serviceview.tmpl';

		# Create the params

		for my $t (@times) {
			$template_params{"ZOOM$t"} = "";
			$template_params{"IMG$t"} = "";
		}
	}

RENDERING:
	if (! $template_filename ) {
		# Unknown --> HTTP Gone....
		print header( -status => 410, );
		next;
	}

	print header( -status => 200, "-Content-Type" => "text/html", );
	my $template = HTML::Template->new(
		filename => "$Munin::Common::Defaults::MUNIN_CONFDIR/templates/$template_filename",
	);

	$template->param(%template_params);

	$template->output(print_to => *STDOUT);
}
